name: Application CI
env:
  JFROG_URL: ${{ secrets.JFROG_URL }}
  JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }} 
  JFROG_API_KEY : ${{ secrets.JFROG_API_KEY }}
on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]
jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      if: ${{ success() }}
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx --no-restore --verbosity normal
    
    - name: Generate report
      if: ${{ success() }}
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool 
        ~/.dotnet/tools/reportgenerator "-reports:./TimeManagementUT/coverage.opencover.xml" "-targetdir:./CodeCoverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
    
    - name: code analysis using sonar cloud
      if: ${{ success() }}
      run: |
        dotnet tool install --global dotnet-sonarscanner 
        dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx --no-restore --verbosity normal
        dotnet build-server shutdown
        dotnet sonarscanner begin /k:${{ secrets.SONAR_PROJECT_KEY }} /o:${{ secrets.SONAR_ORG_KEY }} /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login=${{ secrets.SONAR_TOKEN }} /d:sonar.cs.opencover.reportsPaths="./TimeManagementUT/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="./TimeManagementUT/TestResults/*.trx"
        dotnet build ./xunit_practice_two.sln
        dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  publish_docker_image:
    needs: [build_and_test]
    env:
      CONTAINER_IMAGE: $ARTIFACTORY/sample-app-${GITHUB_REF##*/}
      ARTIFACTORY: urmilag.jfrog.io/docker-local
      ARTIFACTORY_BUCKET: docker-local
    if: github.event_name == 'push' 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set artifactory and bucket for master 
        if: github.ref == 'refs/heads/master'
        run: |
          echo "::set-env name=ARTIFACTORY::urmilag.jfrog.io/docker-qa" 
          echo "::set-env name=ARTIFACTORY_BUCKET::docker-qa" 
      - name: Build docker image for develop
        id: build
        run: |
          docker build . --file ./scripts/build/Dockerfile -t ${{ env.CONTAINER_IMAGE }}:${GITHUB_SHA::8}
