name: Application CI
on:
  pull_request:
    branches: [ develop, master ]
  push:
    branches: [sonar]
jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      if: ${{ success() }}
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --logger trx --no-restore --verbosity normal
    
    - name: Generate report
      if: ${{ success() }}
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool 
        ~/.dotnet/tools/reportgenerator "-reports:./TimeManagementUT/coverage.opencover.xml" "-targetdir:./CodeCoverage" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
    - name: code analysis using sonar cloud
      if: ${{ success() }}
      run: |
        dotnet tool install --global dotnet-sonarscanner 
        dotnet build-server shutdown
        dotnet sonarscanner begin /k:"common-project" /o:${{ secrets.SONAR_ORG_KEY }} /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login=$SONAR_TOKEN /d:sonar.cs.opencover.reportsPaths="./TimeManagementUT/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="./TimeManagementUT/TestResults/*.trx"
        dotnet build ./xunit_practice_two.sln
        dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
